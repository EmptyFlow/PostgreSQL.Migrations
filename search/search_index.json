{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PostgreSQL.Migrations To check the sources, visit the github repository . Goal of project The goal of the project is to simplify the creation and management of database migrations. Make it possible to easily integrate migrations into any project/process, be it tests, application, installer, etc. Flexible extension of any part of the migration process. ORM tooling independence makes it easy to change ORMs or use multiple ORMs at the same time in one project. Terminology Apply operation the operation of applying schema (or data) changes to a database Revert operation the operation of reverting a previously applied change to the schema (or data) from the database Migration the structure has a number (order in order) and two scripts - up and down Up script the script is performed when the Apply operation is launched Down script the script is performed when the Revert operation is launched What does the process look like? Create a migration (whatever migration creation strategy you choose) Apply migration to database (local or common developer) Run test (optional but highly recomended), need make three operations in sequence -> Apply, Revert, Apply Create a deployment unit (installer, script, etc.) and add a new migration to it. Apply migration to production database Migration Strategy Migration Strategy controls the organization of migration in your project. It can be classes like in Entity Framework or simple pair of SQL files with names like up.sql and down.sql. PostgreSQL.Migrations already has several Migration Strategy implemented, or you can implement your own for your project.","title":"Home"},{"location":"#postgresqlmigrations","text":"To check the sources, visit the github repository .","title":"PostgreSQL.Migrations"},{"location":"#goal-of-project","text":"The goal of the project is to simplify the creation and management of database migrations. Make it possible to easily integrate migrations into any project/process, be it tests, application, installer, etc. Flexible extension of any part of the migration process. ORM tooling independence makes it easy to change ORMs or use multiple ORMs at the same time in one project.","title":"Goal of project"},{"location":"#terminology","text":"Apply operation the operation of applying schema (or data) changes to a database Revert operation the operation of reverting a previously applied change to the schema (or data) from the database Migration the structure has a number (order in order) and two scripts - up and down Up script the script is performed when the Apply operation is launched Down script the script is performed when the Revert operation is launched","title":"Terminology"},{"location":"#what-does-the-process-look-like","text":"Create a migration (whatever migration creation strategy you choose) Apply migration to database (local or common developer) Run test (optional but highly recomended), need make three operations in sequence -> Apply, Revert, Apply Create a deployment unit (installer, script, etc.) and add a new migration to it. Apply migration to production database","title":"What does the process look like?"},{"location":"#migration-strategy","text":"Migration Strategy controls the organization of migration in your project. It can be classes like in Entity Framework or simple pair of SQL files with names like up.sql and down.sql. PostgreSQL.Migrations already has several Migration Strategy implemented, or you can implement your own for your project.","title":"Migration Strategy"},{"location":"console/","text":"Console Application To download binary build please check the github repository . Commands apply [options] - Apply all new migrations to database(s) revert [options] - Revert database to state before migration specified in parameter force-revert [options] - Revert only one migration specified in parameter revert-all [options] - Revert database to state before all migrations add-migration [options] - Add new migration file(s) apply-profile [options] - Apply all new migrations to database(s). Most options readed from profile file. revert-profile [options] - Revert database to state before migration specified in parameter. Most options are read from the profile file. force-revert-profile [options] - Revert only one migration specified in parameter. Most options are read from the profile file. revert-all-profile [options] - Revert database to state before all migrations. Most options are read from the profile file. add-migration-profile [options] - Add new migration file(s). Most options are read from the profile file. version - Display version information apply For check available options use command apply --help . -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings=[string] [string] - [required] List of connection strings to which migrations will be applied. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored. revert For check available options use command revert --help . -m=[number] or --migration=[number] - [required] The parameter specifies the number of the migration to which you want to roll back the changes -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings [string] [string] - [required] List of connection strings to which migrations will be applied -s=[string] or --strategy [string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored. force-revert For check available options use command force-revert --help . -m=[number] or --migration [number] - [required] The parameter specifies the number of the migration which will be reverted (if it was applied before) and after it applied once again -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings=[string] [string] - [required] List of connection strings to which migrations will be applied. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored. add-migration For check available options use command force-revert --help . -m=[number] or --migrationnumber=[number] - [required] Migration number for the new migration file(s) -p=[file] or --parameters=[string]=[string] [string]=[string] - [required] List of parameters. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for generate migrations. -g=[string] or --group=[string] - Adding group to new migration. -i=[string] or --issue=[string] - Adding issue to new migration. -d=[string] or --description=[string] - You can specify description for new migration. revert-all For check available options use command force-revert --help . -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings=[string] [string] - [required] List of connection strings to which migrations will be applied. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored. apply-profile For check available options use command apply-profile --help . -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below). revert-profile For check available options use command revert-profile --help . -m=[number] or --migration=[number] - [required] The parameter specifies the number of the migration to which you want to roll back the changes -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below). force-revert-profile For check available options use command force-revert-profile --help . -m=[number] or --migration=[number] - [required] The parameter specifies the number of the migration which will be reverted (if it was applied before) and after it applied once again -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below). add-migration-profile For check available options use command add-migration-profile --help . -m=[number] or --migrationnumber=[number] - [required] Migration number for the new migration file(s) -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below). -g=[string] or --group=[string] - Adding group to new migration. -i=[string] or --issue=[string] - Adding issue to new migration. -d=[string] or --description=[string] - You can specify description for new migration. revert-all-profile For check available options use command revert-all-profile --help . -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below). Strategies CSharpClasses Migrations are organized into C# classes. Each class inherits from the MigrationScript class from the PostgreSQL.Migrations assembly and decorated MigrationNumber attribute. You must implement the Up and Down methods, where Up returns the SQL script that will be executed during the Apply operation , and Down returns the SQL script that will be executed during the Revert operation . Optional you can fill fields Issue (to bound the issue from bugtracker) and Group (to bound migration with group or groups). [MigrationNumber ( 1, \"http://issue/1\", \"firstGroup\" )] public class InitialMigration : MigrationScript { public override string Down () => \"DROP TABLE test;\"; public override string Up () => \"CREATE TABLE test(id int4);\"; } Profile file A profile file is a simple text file containing a few lines. A profile file is an alternative way to populate some parameters such as connection strings, files, strategy, and group for operations apply , revert , force-revert etc. If profile file not is not specified then will be try to read migrationprofile in current directory. Format in profile file as follow: [name of parameter] [value of parameter] Parameters constring - [miltiple] for fill connection string. file - [miltiple] for fill connection string. strategy - for fill strategy parameter. group - for fill group parameter. genparameter - for fill parameters for add-migration operation. migrationtable - for fill tablename parameter. Example constring Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=firstdatabase constring Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=seconddatabase file ~/project1/Migrations1.dll file ~/project2/Migrations2.dll strategy CSharpClasses group ProductionMigrations","title":"Console Application"},{"location":"console/#console-application","text":"To download binary build please check the github repository .","title":"Console Application"},{"location":"console/#commands","text":"apply [options] - Apply all new migrations to database(s) revert [options] - Revert database to state before migration specified in parameter force-revert [options] - Revert only one migration specified in parameter revert-all [options] - Revert database to state before all migrations add-migration [options] - Add new migration file(s) apply-profile [options] - Apply all new migrations to database(s). Most options readed from profile file. revert-profile [options] - Revert database to state before migration specified in parameter. Most options are read from the profile file. force-revert-profile [options] - Revert only one migration specified in parameter. Most options are read from the profile file. revert-all-profile [options] - Revert database to state before all migrations. Most options are read from the profile file. add-migration-profile [options] - Add new migration file(s). Most options are read from the profile file. version - Display version information","title":"Commands"},{"location":"console/#apply","text":"For check available options use command apply --help . -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings=[string] [string] - [required] List of connection strings to which migrations will be applied. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored.","title":"apply"},{"location":"console/#revert","text":"For check available options use command revert --help . -m=[number] or --migration=[number] - [required] The parameter specifies the number of the migration to which you want to roll back the changes -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings [string] [string] - [required] List of connection strings to which migrations will be applied -s=[string] or --strategy [string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored.","title":"revert"},{"location":"console/#force-revert","text":"For check available options use command force-revert --help . -m=[number] or --migration [number] - [required] The parameter specifies the number of the migration which will be reverted (if it was applied before) and after it applied once again -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings=[string] [string] - [required] List of connection strings to which migrations will be applied. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored.","title":"force-revert"},{"location":"console/#add-migration","text":"For check available options use command force-revert --help . -m=[number] or --migrationnumber=[number] - [required] Migration number for the new migration file(s) -p=[file] or --parameters=[string]=[string] [string]=[string] - [required] List of parameters. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for generate migrations. -g=[string] or --group=[string] - Adding group to new migration. -i=[string] or --issue=[string] - Adding issue to new migration. -d=[string] or --description=[string] - You can specify description for new migration.","title":"add-migration"},{"location":"console/#revert-all","text":"For check available options use command force-revert --help . -f=[file] [file] or --files=[file] [file] - [required] List of files containing migrations. -c=[string] [string] or --connectionStrings=[string] [string] - [required] List of connection strings to which migrations will be applied. -s=[string] or --strategy=[string] - [default = CSharpClasses] Select strategy for read migrations. -g=[string] or --group=[string] - If you specify some group or groups (separated by commas), migrations will be filtered by these groups -t=[string] or --tablename=[string] - You can change the name of the table in which the migrations will be stored.","title":"revert-all"},{"location":"console/#apply-profile","text":"For check available options use command apply-profile --help . -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below).","title":"apply-profile"},{"location":"console/#revert-profile","text":"For check available options use command revert-profile --help . -m=[number] or --migration=[number] - [required] The parameter specifies the number of the migration to which you want to roll back the changes -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below).","title":"revert-profile"},{"location":"console/#force-revert-profile","text":"For check available options use command force-revert-profile --help . -m=[number] or --migration=[number] - [required] The parameter specifies the number of the migration which will be reverted (if it was applied before) and after it applied once again -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below).","title":"force-revert-profile"},{"location":"console/#add-migration-profile","text":"For check available options use command add-migration-profile --help . -m=[number] or --migrationnumber=[number] - [required] Migration number for the new migration file(s) -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below). -g=[string] or --group=[string] - Adding group to new migration. -i=[string] or --issue=[string] - Adding issue to new migration. -d=[string] or --description=[string] - You can specify description for new migration.","title":"add-migration-profile"},{"location":"console/#revert-all-profile","text":"For check available options use command revert-all-profile --help . -p=[file] or --profile=[file] - Path to file contains profile (check Profile file section below).","title":"revert-all-profile"},{"location":"console/#strategies","text":"","title":"Strategies"},{"location":"console/#csharpclasses","text":"Migrations are organized into C# classes. Each class inherits from the MigrationScript class from the PostgreSQL.Migrations assembly and decorated MigrationNumber attribute. You must implement the Up and Down methods, where Up returns the SQL script that will be executed during the Apply operation , and Down returns the SQL script that will be executed during the Revert operation . Optional you can fill fields Issue (to bound the issue from bugtracker) and Group (to bound migration with group or groups). [MigrationNumber ( 1, \"http://issue/1\", \"firstGroup\" )] public class InitialMigration : MigrationScript { public override string Down () => \"DROP TABLE test;\"; public override string Up () => \"CREATE TABLE test(id int4);\"; }","title":"CSharpClasses"},{"location":"console/#profile-file","text":"A profile file is a simple text file containing a few lines. A profile file is an alternative way to populate some parameters such as connection strings, files, strategy, and group for operations apply , revert , force-revert etc. If profile file not is not specified then will be try to read migrationprofile in current directory. Format in profile file as follow: [name of parameter] [value of parameter]","title":"Profile file"},{"location":"console/#parameters","text":"constring - [miltiple] for fill connection string. file - [miltiple] for fill connection string. strategy - for fill strategy parameter. group - for fill group parameter. genparameter - for fill parameters for add-migration operation. migrationtable - for fill tablename parameter.","title":"Parameters"},{"location":"console/#example","text":"constring Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=firstdatabase constring Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=seconddatabase file ~/project1/Migrations1.dll file ~/project2/Migrations2.dll strategy CSharpClasses group ProductionMigrations","title":"Example"},{"location":"library/","text":"Library API How to install library? Net CLI dotnet add package PostgreSQL.Migrations Package Manager Install-Package PostgreSQL.Migrations NuGet UI Just search package by PostgreSQL.Migrations name MigrationRunner Entry point for working with migration is class MigrationRunner . To work, it needs few things MigrationResolver , ConnectionString and SqlRunner . Simple example how it can works: var resolver = ...; // initialize resolver var runner = new MigrationRunner (); // create instance of runner await runner.LoadMigrationsAsync ( resolver ); // load migrations using the specified resolver runner.ConnectionString ( \"Host=localhost;Database=postgres\" ); // configure the connection string to the database where you want to migrate. var sqlRunner = new PostgresSqlRunner(); // create instance of default sql runner runner.ApplyMigrationsAsync(sqlRunner); // Apply all new migrations to database(s). return runner; You can check all the operations supported by MigrationRunner in the MigrationRunner Operations section. MigrationResolver This class is responsible for retrieving all the necessary migration information from the source and creating a list of classes of type AvailableMigration based on this information. Also it responsible for generating new migration file or files. It have two methods GetMigrationsAsync and GenerateNewMigrationAsync . GetMigrationsAsync Result of performing this method must be list of all available migrations in project. GenerateNewMigrationAsync The result of this method will be to create migrations in the source code. This could be a file or files or another form. parameters depend on the specific migration resolver and can be in any form, please see the documentation for the required MigrationResolver for more information. SqlRunner This class is responsible for low-level interaction with the database like creating transactions and perform SQL queries. MigrationRunner Operations ApplyMigrationsAsync - Apply all new migrations to database(s). RevertMigrationAsync - Revert database to state before migration specified in parameter. RevertAllMigrationAsync - Return the database to a state before performing any migrations. ForceMigrationAsync - Revert only one migration specified in parameter. This is useful during development migrations because you can make revert + apply only one migration and don't touch other migrations, but in production it is not recommended to perform this operation as it may compromise the integrity of the database.","title":"Library API"},{"location":"library/#library-api","text":"","title":"Library API"},{"location":"library/#how-to-install-library","text":"","title":"How to install library?"},{"location":"library/#net-cli","text":"dotnet add package PostgreSQL.Migrations","title":"Net CLI"},{"location":"library/#package-manager","text":"Install-Package PostgreSQL.Migrations","title":"Package Manager"},{"location":"library/#nuget-ui","text":"Just search package by PostgreSQL.Migrations name","title":"NuGet UI"},{"location":"library/#migrationrunner","text":"Entry point for working with migration is class MigrationRunner . To work, it needs few things MigrationResolver , ConnectionString and SqlRunner . Simple example how it can works: var resolver = ...; // initialize resolver var runner = new MigrationRunner (); // create instance of runner await runner.LoadMigrationsAsync ( resolver ); // load migrations using the specified resolver runner.ConnectionString ( \"Host=localhost;Database=postgres\" ); // configure the connection string to the database where you want to migrate. var sqlRunner = new PostgresSqlRunner(); // create instance of default sql runner runner.ApplyMigrationsAsync(sqlRunner); // Apply all new migrations to database(s). return runner; You can check all the operations supported by MigrationRunner in the MigrationRunner Operations section.","title":"MigrationRunner"},{"location":"library/#migrationresolver","text":"This class is responsible for retrieving all the necessary migration information from the source and creating a list of classes of type AvailableMigration based on this information. Also it responsible for generating new migration file or files. It have two methods GetMigrationsAsync and GenerateNewMigrationAsync .","title":"MigrationResolver"},{"location":"library/#getmigrationsasync","text":"Result of performing this method must be list of all available migrations in project.","title":"GetMigrationsAsync"},{"location":"library/#generatenewmigrationasync","text":"The result of this method will be to create migrations in the source code. This could be a file or files or another form. parameters depend on the specific migration resolver and can be in any form, please see the documentation for the required MigrationResolver for more information.","title":"GenerateNewMigrationAsync"},{"location":"library/#sqlrunner","text":"This class is responsible for low-level interaction with the database like creating transactions and perform SQL queries.","title":"SqlRunner"},{"location":"library/#migrationrunner-operations","text":"ApplyMigrationsAsync - Apply all new migrations to database(s). RevertMigrationAsync - Revert database to state before migration specified in parameter. RevertAllMigrationAsync - Return the database to a state before performing any migrations. ForceMigrationAsync - Revert only one migration specified in parameter. This is useful during development migrations because you can make revert + apply only one migration and don't touch other migrations, but in production it is not recommended to perform this operation as it may compromise the integrity of the database.","title":"MigrationRunner Operations"}]}